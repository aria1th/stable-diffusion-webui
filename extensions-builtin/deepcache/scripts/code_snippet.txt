
                # U-Net Encoder
                if not isinstance(timesteps, (int, float)):
                    real_timestep = timesteps[0].item()
                else:
                    real_timestep = timesteps
                hs = []
                with th.no_grad():
                    t_emb = cond_cast_unet(timestep_embedding(timesteps, self.model_channels, repeat_only=False))
                    emb = self.time_embed(t_emb)

                    if is_sdxl:
                        assert y.shape[0] == x.shape[0]
                        emb = emb + self.label_emb(y)
                    cached_h = get_cache(session.enumerated_timestep["value"], real_timestep)
                    

                    h = x
                    for i, module in enumerate(self.input_blocks):
                        self.current_h_shape = (h.shape[0], h.shape[1], h.shape[2], h.shape[3])
                        t2i_injection = [3, 5, 8] if is_sdxl else [2, 5, 8, 11]
                        if cached_h is not None and use_cache_cond() and id > caching_level:
                            if i in t2i_injection:
                                total_t2i_adapter_embedding.pop(0)
                        else:
                            h = module(h, emb, context)
                            if i in t2i_injection:
                                h = aligned_adding(h, total_t2i_adapter_embedding.pop(0), require_inpaint_hijack)
                            hs.append(h)
                # U-Net Middle Block
                if not use_cache_cond():
                    self.current_h_shape = (h.shape[0], h.shape[1], h.shape[2], h.shape[3])
                    h = self.middle_block(h, emb, context)
                    session.log_skip('run_before_cache_middle_block_cnet')
                    h = aligned_adding(h, total_controlnet_embedding.pop(), require_inpaint_hijack)
                    if len(total_t2i_adapter_embedding) > 0 and is_sdxl:
                        h = aligned_adding(h, total_t2i_adapter_embedding.pop(0), require_inpaint_hijack)
                relative_cache_level = len(self.output_blocks) - caching_level - 1
                # U-Net Decoder
                for i, module in enumerate(self.output_blocks):
                    if cached_h is not None and use_cache_cond() and idx == relative_cache_level:
                        # use cache
                        h = cached_h
                    elif cache_cond() and idx == relative_cache_level:
                        # put cache
                        put_cache(h, self.enumerated_timestep["value"], real_timestep)
                    else:
                        total_controlnet_embedding.pop()
                        continue
                    self.current_h_shape = (h.shape[0], h.shape[1], h.shape[2], h.shape[3])
                    h = th.cat([h, aligned_adding(hs.pop(), total_controlnet_embedding.pop(), require_inpaint_hijack)], dim=1)
                    h = module(h, emb, context)

                # U-Net Output
                h = h.type(x.dtype)
                h = self.out(h)

